@page "/{*path:nonfile}"

@inject IConfiguration config
@inject BlazeBinConfiguration appConfig
@inject ComponentApplicationState appState
@inject IAntiforgery af
@{
    Layout = null;
    var key = config["ApplicationInsights:InstrumentationKey"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0" />
    <meta name="description" content="A tool for sharing your source code with the world!" />
    <base href="~/" />

    @if (!Request.Headers.ContainsKey("DNT") && !string.IsNullOrWhiteSpace(key))
    {
        <script type="text/javascript">
             !function(e,t,n){var r="script",a="undefined",i="crossOrigin",o=n.name||"appInsights";(n.name||e.appInsightsSDK)&&(e.appInsightsSDK=o);var c=e[o]||function(o){var c=!1,u=!1,s={initialize:!0,queue:[],sv:"5",version:2,config:o},p=o.url||n.src;if(p){function l(e){c=!0,s.queue=[],u||(u=!0,_reportFailure(p))}function d(e,t){u||setTimeout(function(){!t&&s.core||l()},500)}var f=function(){var e=t.createElement(r);e.src=p;var o=n[i];return!o&&""!==o||e[i]==a||(e[i]=o),e.onload=d,e.onerror=l,e.onreadystatechange=function(t,n){"loaded"!==e.readyState&&"complete"!==e.readyState||d(0,n)},e}();if(n.ld<0)t.getElementsByTagName("head")[0].appendChild(f);else setTimeout(function(){t.getElementsByTagName(r)[0].parentNode.appendChild(f)},n.ld||0)}try{s.cookie=t.cookie}catch(e){}function g(e){for(;e.length;)!function(e){s[e]=function(){var t=arguments;c||s.queue.push(function(){s[e].apply(s,t)})}}(e.pop())}g(["trackEvent","trackPageView","trackException","trackTrace","trackDependencyData","trackMetric","trackPageViewPerformance","startTrackPage","stopTrackPage","startTrackEvent","stopTrackEvent","addTelemetryInitializer","setAuthenticatedUserContext","clearAuthenticatedUserContext","flush"]),s.SeverityLevel={Verbose:0,Information:1,Warning:2,Error:3,Critical:4};var m=(o.extensionConfig||{}).ApplicationInsightsAnalytics||{};if(!0!==o.disableExceptionTracking&&!0!==m.disableExceptionTracking){g(["_onerror"]);var v=e.onerror;e.onerror=function(t,n,r,a,i){var o=v&&v(t,n,r,a,i);return!0!==o&&s._onerror({message:t,url:n,lineNumber:r,columnNumber:a,error:i,evt:e.event}),o},o.autoExceptionInstrumented=!0}return s}(n.cfg);function u(){n.onInit&&n.onInit(c)}e[o]=c,c.queue&&0===c.queue.length?(c.queue.push(u),c.trackPageView({})):u()}(window,document,{
                 src:"https://js.monitor.azure.com/scripts/b/ai.2.min.js",
                 cfg:{
                     instrumentationKey: '@key',
                     disableFetchTracking: false,
                     enableCorsCorrelation: true,
                     enableRequestHeaderTracking: true,
                     enableResponseHeaderTracking: true,
                     enableAutoRouteTracking: true
                 }
            });
        </script>
    }

    <environment exclude="Production,Staging">
        <link rel="stylesheet" href="/fa/css/font-awesome.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="/css/application.css" asp-append-version="true" />
        <link rel="stylesheet" href="/_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.css" asp-append-version="true" />
    </environment>

    <environment include="Production,Staging">
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)fa/css/font-awesome.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)css/application.css" asp-append-version="true" />
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.css" asp-append-version="true" />
    </environment>

    <link rel="stylesheet" href="BlazeBin.Client.styles.css" asp-append-version="true" />
    <component type="typeof(HeadOutlet)" render-mode="WebAssemblyPrerendered" />
</head>
<body>
    <noscript>
        BlazeBin requires both JavaScript and WebAssembly to be enabled. For a basic, html-only experience, navigate to <a href="~/basic">BlazeBin Basic</a>.
    </noscript>
    <main id="app">
        <component type="typeof(BlazeBin.Client.App)" render-mode="WebAssemblyPrerendered" />
    </main>

    <environment exclude="Production,Staging">
        <script src="/_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js" asp-append-version="true"></script>
        <script>require.config({ paths: { 'vs': '_content/BlazorMonaco/lib/monaco-editor/min/vs' } });</script>
        <script src="/_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js" asp-append-version="true"></script>
    </environment>

    <environment include="Production,Staging">
        <script src="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js" asp-append-version="true"></script>
        <script>require.config({ paths: { 'vs': '@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs' } });</script>
        <script src="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js" asp-append-version="true"></script>
    </environment>
    <script src="/_framework/blazor.webassembly.js" asp-append-version="true"></script>
    <script src="/_content/BlazorMonaco/jsInterop.js" asp-append-version="true" async></script>

    <script>
        window.onresize = (e) => {
            if (window.blazorMonaco && window.blazorMonaco.editor) {
                window.blazorMonaco.editor.layout('editor', {});
                let isNarrow = window.innerWidth < 780;
                window.blazorMonaco.editor.updateOptions('editor', {
                    minimap: {enabled: !isNarrow},
                    lineNumbers: isNarrow ? "off" : "on"
                });
            }
        };
        window.blazebin = {
        getWindowWidth: function() {
            return window.innerWidth;
            }
        };
    </script>
    @{
        var tokens = af.GetAndStoreTokens(HttpContext);
        var requestToken = tokens.RequestToken;

        appState.PersistAsJson("af-token", requestToken);
        appState.PersistAsJson("client-config", appConfig.Client);
    }

    <persist-component-state />
</body>
</html>
