@using BlazeBin.Shared
@inject IConfiguration appConfig
@inject BlazeBinConfiguration config
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0" />
    <meta name="description" content="A tool for sharing your source code with the world!" />
    <title>BlazeBin Basic@( string.IsNullOrWhiteSpace(@ViewData["Title"]?.ToString()) ? "" : $" - {ViewData["Title"]}")</title>
    <base href="~/" />
    @{
        var key = appConfig["ApplicationInsights:InstrumentationKey"];
    }
    @if (!Context.Request.Headers.ContainsKey("DNT") && !string.IsNullOrWhiteSpace(key))
    {
        <script type="text/javascript">
             !function(e,n,r){var t="script",a="undefined",i="crossOrigin",c=r.name||"appInsights";(r.name||e.appInsightsSDK)&&(e.appInsightsSDK=c);var o=e[c]||function(c){var o={initialize:!0,queue:[],sv:"5",version:2,config:c},u=c.url||r.src;if(u){var s=function(){var e=n.createElement(t);e.src=u;var c=r[i];return!c&&""!==c||e[i]==a||(e[i]=c),e}();n.getElementsByTagName("head")[0].appendChild(s)}try{o.cookie=n.cookie}catch(e){}function p(e){for(;e.length;)!function(e){o[e]=function(){var n=arguments;o.queue.push(function(){o[e].apply(o,n)})}}(e.pop())}p(["trackEvent","trackPageView","trackException","trackTrace","trackDependencyData","trackMetric","trackPageViewPerformance","startTrackPage","stopTrackPage","startTrackEvent","stopTrackEvent","addTelemetryInitializer","setAuthenticatedUserContext","clearAuthenticatedUserContext","flush"]),o.SeverityLevel={Verbose:0,Information:1,Warning:2,Error:3,Critical:4};var g=(c.extensionConfig||{}).ApplicationInsightsAnalytics||{};if(!0!==c.disableExceptionTracking&&!0!==g.disableExceptionTracking){p(["_onerror"]);var l=e.onerror;e.onerror=function(n,r,t,a,i){var c=l&&l(n,r,t,a,i);return!0!==c&&o._onerror({message:n,url:r,lineNumber:t,columnNumber:a,error:i,evt:e.event}),c},c.autoExceptionInstrumented=!0}return o}(r.cfg);function u(){r.onInit&&r.onInit(o)}e[c]=o,o.queue&&0===o.queue.length?(o.queue.push(u),o.trackPageView({})):u()}(window,document,{
                 src:"https://js.monitor.azure.com/scripts/b/ai.2.min.js",
                 cfg:{
                     instrumentationKey: '@key',
                     disableFetchTracking: false,
                     enableCorsCorrelation: true,
                     enableRequestHeaderTracking: true,
                     enableResponseHeaderTracking: true,
                     enableAutoRouteTracking: true
                 }
            });
        </script>
    }
    <link href="@(config.Client.ContentRoot)css/application.css" rel="stylesheet" asp-append-version="true" />
    <link href="@(config.Client.ContentRoot)css/basic.css" rel="stylesheet" asp-append-version="true" />
</head>
<body>
    @RenderBody()
    <footer>
        <div class="banner">
            ⚠️<span>Notice: Content posted here will be deleted after 30 days!</span>
        </div>
        <div class="policy-container">
            @if (config.Client.AcceptableUsePolicyUrl != null)
            {
                <a href="@config.Client.AcceptableUsePolicyUrl">Acceptable Use Policy</a>
            }

            @if (config.Client.PrivacyPolicyUrl != null)
            {
                <a href="@config.Client.PrivacyPolicyUrl">Privacy Policy</a>
            }

            @if (config.Client.GeneralPolicyUrl != null)
            {
                <a href="@config.Client.GeneralPolicyUrl" title="View all policy documents on GitHub">View on GitHub</a>
            }
        </div>
    </footer>
</body>
</html>
