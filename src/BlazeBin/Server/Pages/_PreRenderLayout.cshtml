@inject IConfiguration config
@inject BlazeBinConfiguration appConfig
@inject PersistentComponentState appState
@inject IAntiforgery af
@{
    var tokens = af.GetAndStoreTokens(Context);
    appState.RegisterOnPersisting(() =>
    {
        var requestToken = tokens.RequestToken;

        appState.PersistAsJson("af-token", requestToken);
        appState.PersistAsJson("client-config", appConfig.Client);
        return Task.CompletedTask;
    });

    var key = config["ApplicationInsights:InstrumentationKey"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0" />
    <meta name="description" content="A tool for sharing your source code with the world!" />
    <base href="~/" />

    @if (!Context.Request.Headers.ContainsKey("DNT") && !string.IsNullOrWhiteSpace(key))
    {
        <script type="text/javascript">
             !function(e,n,r){var t="script",a="undefined",i="crossOrigin",c=r.name||"appInsights";(r.name||e.appInsightsSDK)&&(e.appInsightsSDK=c);var o=e[c]||function(c){var o={initialize:!0,queue:[],sv:"5",version:2,config:c},u=c.url||r.src;if(u){var s=function(){var e=n.createElement(t);e.src=u;var c=r[i];return!c&&""!==c||e[i]==a||(e[i]=c),e}();n.getElementsByTagName("head")[0].appendChild(s)}try{o.cookie=n.cookie}catch(e){}function p(e){for(;e.length;)!function(e){o[e]=function(){var n=arguments;o.queue.push(function(){o[e].apply(o,n)})}}(e.pop())}p(["trackEvent","trackPageView","trackException","trackTrace","trackDependencyData","trackMetric","trackPageViewPerformance","startTrackPage","stopTrackPage","startTrackEvent","stopTrackEvent","addTelemetryInitializer","setAuthenticatedUserContext","clearAuthenticatedUserContext","flush"]),o.SeverityLevel={Verbose:0,Information:1,Warning:2,Error:3,Critical:4};var g=(c.extensionConfig||{}).ApplicationInsightsAnalytics||{};if(!0!==c.disableExceptionTracking&&!0!==g.disableExceptionTracking){p(["_onerror"]);var l=e.onerror;e.onerror=function(n,r,t,a,i){var c=l&&l(n,r,t,a,i);return!0!==c&&o._onerror({message:n,url:r,lineNumber:t,columnNumber:a,error:i,evt:e.event}),c},c.autoExceptionInstrumented=!0}return o}(r.cfg);function u(){r.onInit&&r.onInit(o)}e[c]=o,o.queue&&0===o.queue.length?(o.queue.push(u),o.trackPageView({})):u()}(window,document,{
                 src:"https://js.monitor.azure.com/scripts/b/ai.2.min.js",
                 cfg:{
                     instrumentationKey: '@key',
                     disableFetchTracking: false,
                     enableCorsCorrelation: true,
                     enableRequestHeaderTracking: true,
                     enableResponseHeaderTracking: true,
                     enableAutoRouteTracking: true
                 }
            });
        </script>
    }

    <environment exclude="Production,Staging">
        <link rel="stylesheet" href="/fa/css/font-awesome.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="/css/application.css" asp-append-version="true" />
        <link rel="stylesheet" href="/_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.css" asp-append-version="true" />
    </environment>

    <environment include="Production,Staging">
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)fa/css/font-awesome.min.css" asp-append-version="true" />
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)css/application.css" asp-append-version="true" />
        <link rel="stylesheet" href="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.css" asp-append-version="true" />
    </environment>

    <link rel="stylesheet" href="BlazeBin.Client.styles.css" asp-append-version="true" />
    <component type="typeof(HeadOutlet)" render-mode="WebAssemblyPrerendered" />
</head>
<body>

    <noscript>
        BlazeBin requires both JavaScript and WebAssembly to be enabled. For a basic, html-only experience, navigate to <a href="~/basic">BlazeBin Basic</a>.
    </noscript>
    <main id="app">
        @RenderBody()
    </main>

    <environment exclude="Production,Staging">
        <script src="/_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js" asp-append-version="true"></script>
        <script>require.config({ paths: { 'vs': '_content/BlazorMonaco/lib/monaco-editor/min/vs' } });</script>
        <script src="/_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js" asp-append-version="true"></script>
    </environment>

    <environment include="Production,Staging">
        <script src="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js" asp-append-version="true"></script>
        <script>require.config({ paths: { 'vs': '@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs' } });</script>
        <script src="@(appConfig.Client.ContentRoot)_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js" asp-append-version="true"></script>
    </environment>
    <script src="/_framework/blazor.webassembly.js" asp-append-version="true"></script>
    <script src="/_content/BlazorMonaco/jsInterop.js" asp-append-version="true" async></script>

    <script>
        window.onresize = (e) => {
            if (window.blazorMonaco && window.blazorMonaco.editor) {
                window.blazorMonaco.editor.layout('editor', {});
                let isNarrow = window.innerWidth < 780;
                window.blazorMonaco.editor.updateOptions('editor', {
                    minimap: {enabled: !isNarrow},
                    lineNumbers: isNarrow ? "off" : "on"
                });
            }
        };
        window.blazebin = {
        getWindowWidth: function() {
            return window.innerWidth;
            }
        };
    </script>
    <persist-component-state />
</body>
</html>
