using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BlazeBin.Shared.Extensions
{
    public static class FileDataExtensions
    {
        private static readonly Dictionary<string, string> _extenstionToLangMap = new()
        {
            ["as"] = "actionscript",
            ["ada"] = "ada",
            ["prw"] = "advpl",
            ["affect"] = "affectscript",
            ["al"] = "al",
            ["ansible"] = "ansible",
            ["antlr"] = "g4",
            ["any"] = "anyscript",
            ["htaccess"] = "apache",
            ["cls"] = "apex",
            ["apib"] = "apib",
            ["apl"] = "apl",
            ["applescript"] = "applescript",
            ["adoc"] = "asciidoc",
            ["asp"] = "asp",
            ["asm"] = "assembly",
            ["ats"] = "ats",
            ["ahk"] = "autohotkey",
            ["autoit"] = "au3",
            ["avcs"] = "avro",
            ["azcli"] = "azcli",
            ["bal"] = "ballerina",
            ["bat"] = "bat",
            ["bats"] = "bats",
            ["bzl"] = "bazel",
            ["bf"] = "befunge",
            ["bicep"] = "bicep",
            ["bib"] = "bibtex",
            ["biml"] = "biml",
            ["blitzbasic"] = "blitzbasic",
            ["bolt"] = "bolt",
            ["bsq"] = "bosque",
            ["c"] = "c",
            ["cal"] = "c_al",
            ["cabal"] = "cabal",
            ["Caddyfile"] = "caddyfile",
            ["casc"] = "casc",
            ["cddl"] = "cddl",
            ["ceylon"] = "ceylon",
            ["cfc"] = "cfc",
            ["cfm"] = "cfm",
            ["clojure"] = "clojure",
            ["clojurescript"] = "clojurescript",
            ["yml"] = "cloudfoundrymanifest",
            ["cmake"] = "cmake",
            ["cbl"] = "cobol",
            ["ql"] = "codeql",
            ["coffee"] = "coffeescript",
            ["cfml"] = "coldfusion",
            ["confluence"] = "confluence",
            ["ckbk"] = "cookbook",
            ["cpp"] = "cpp",
            ["cr"] = "crystal",
            ["cs"] = "csharp",
            ["css"] = "css",
            ["feature"] = "cucumber",
            ["cu"] = "cuda",
            ["pyx"] = "cython",
            ["dal"] = "dal",
            ["dart"] = "dart",
            ["html"] = "django",
            ["diff"] = "diff",
            ["d"] = "dlang",
            ["dockerfile"] = "dockerfile",
            ["dockerignore"] = "dockerignore",
            ["dtx"] = "doctex",
            ["env"] = "dotenv",
            ["dot"] = "dotjs",
            ["dox"] = "doxygen",
            ["drl"] = "drools",
            ["dust"] = "dustjs",
            ["dylan"] = "dylanlang",
            ["edge"] = "edge",
            ["eex"] = "eex",
            ["es"] = "elastic",
            ["ex"] = "elixir",
            ["elm"] = "elm",
            ["erb"] = "erb",
            ["erl"] = "erlang",
            ["falcon"] = "falcon",
            ["fql"] = "fauna",
            ["fortran"] = "f",
            ["ftl"] = "freemarker",
            ["fs"] = "fsharp",
            ["fthtml"] = "fthtml",
            ["gspec"] = "galen",
            ["gml"] = "gamemaker",
            ["gml"] = "gamemaker2",
            ["gml"] = "gamemaker81",
            ["gcode"] = "gcode",
            ["gen"] = "genstat",
            ["git"] = "git",
            ["glsl"] = "glsl",
            ["glyphs"] = "glyphs",
            ["gp"] = "gnuplot",
            ["go"] = "go",
            ["gd"] = "godot",
            ["gql"] = "graphql",
            ["gv"] = "graphviz",
            ["groovy"] = "groovy",
            ["haml"] = "haml",
            ["hbs"] = "handlebars",
            ["prg"] = "harbour",
            ["hs"] = "haskell",
            ["haxe"] = "haxe",
            ["hjson"] = "hjson",
            ["hlsl"] = "hlsl",
            ["yaml"] = "homeassistant",
            ["hosts"] = "hosts",
            ["html"] = "html",
            ["http"] = "http",
            ["aff"] = "hunspell",
            ["hy"] = "hy",
            ["hypr"] = "hypr",
            ["icl"] = "icl",
            ["imba"] = "imba",
            ["informix"] = "4gl",
            ["ini"] = "ini",
            ["ink"] = "ink",
            ["iss"] = "innosetup",
            ["io"] = "io",
            ["janet"] = "janet",
            ["java"] = "java",
            ["js"] = "javascript",
            ["jsx"] = "javascriptreact",
            ["jekyll"] = "jekyll",
            ["json"] = "json",
            ["jsonc"] = "jsonc",
            ["jsonnet"] = "jsonnet",
            ["json5"] = "json5",
            ["jl"] = "julia",
            ["id"] = "iodine",
            ["kv"] = "kivy",
            ["ks"] = "kos",
            ["kt"] = "kotlin",
            ["kusto"] = "kusto",
            ["tex"] = "latex",
            ["lat"] = "latino",
            ["less"] = "less",
            ["flex"] = "lex",
            ["lisp"] = "lisp",
            ["lhs"] = "literatehaskell",
            ["log"] = "log",
            ["lol"] = "lolcode",
            ["lsl"] = "lsl",
            ["lua"] = "lua",
            ["mk"] = "makefile",
            ["md"] = "markdown",
            ["marko"] = "marko",
            ["mat"] = "matlab",
            ["ms"] = "maxscript",
            ["mdx"] = "mdx",
            ["mediawiki"] = "mediawiki",
            ["mel"] = "mel",
            ["mjml"] = "mjml",
            ["pq"] = "mlang",
            ["ep"] = "mojolicious",
            ["mongo"] = "mongo",
            ["mson"] = "mson",
            ["ne"] = "nearley",
            ["nim"] = "nim",
            ["nimble"] = "nimble",
            ["nix"] = "nix",
            ["nsi"] = "nsis",
            ["nunjucks"] = "nunjucks",
            ["m"] = "objectivec",
            ["mm"] = "objectivecpp",
            ["ml"] = "ocaml",
            ["ogone"] = "o3",
            ["w"] = "openEdge",
            ["things"] = "openHAB",
            ["pas"] = "pascal",
            ["pddl"] = "pddl",
            ["plan"] = "pddlplan",
            ["happenings"] = "pddlhappenings",
            ["pl"] = "perl",
            ["perl6"] = "pl6",
            ["pgsql"] = "pgsql",
            ["php"] = "php",
            ["pine"] = "pine",
            ["txt"] = "plaintext",
            ["ddl"] = "plsql",
            ["polymer"] = "polymer",
            ["pony"] = "pony",
            ["pcss"] = "postcss",
            ["ps1"] = "powershell",
            ["prisma"] = "prisma",
            ["pde"] = "processinglang",
            ["pro"] = "prolog",
            ["rules"] = "prometheus",
            ["properties"] = "properties",
            ["proto"] = "protobuf",
            ["pug"] = "pug",
            ["pp"] = "puppet",
            ["purs"] = "purescript",
            ["arr"] = "pyret",
            ["py"] = "python",
            ["qvs"] = "qlik",
            ["qml"] = "qml",
            ["qs"] = "qsharp",
            ["r"] = "r",
            ["rkt"] = "racket",
            ["cshtml"] = "razor",
            ["raml"] = "raml",
            ["re"] = "reason",
            ["red"] = "red",
            ["res"] = "rescript",
            ["rst"] = "restructuredtext",
            ["rex"] = "rexx",
            ["tag"] = "riot",
            ["rmd"] = "rmd",
            ["robot"] = "robot",
            ["rb"] = "ruby",
            ["rs"] = "rust",
            ["san"] = "san",
            ["sas"] = "sas",
            ["sbt"] = "sbt",
            ["scad"] = "scad",
            ["scala"] = "scala",
            ["sce"] = "scilab",
            ["scss"] = "scss",
            ["sdl"] = "sdlang",
            ["shader"] = "shaderlab",
            ["sh"] = "shellscript",
            ["slang"] = "slang",
            ["ice"] = "slice",
            ["slim"] = "slim",
            ["ss"] = "silverstripe",
            ["eskip"] = "skipper",
            ["tpl"] = "smarty",
            ["snort"] = "snort",
            ["sol"] = "solidity",
            ["rq"] = "sparql",
            ["sqf"] = "sqf",
            ["sql"] = "sql",
            ["nut"] = "squirrel",
            ["stan"] = "stan",
            ["bazel"] = "starlark",
            ["do"] = "stata",
            ["stencil"] = "stencil",
            ["styled"] = "styled",
            ["styl"] = "stylus",
            ["svelte"] = "svelte",
            ["swagger"] = "swagger",
            ["swift"] = "swift",
            ["swig"] = "swig",
            ["link"] = "systemd",
            ["sv"] = "systemverilog",
            ["tt"] = "t4",
            ["teal"] = "teal",
            ["templatetoolkit"] = "tt3",
            ["tera"] = "tera",
            ["tf"] = "terraform",
            ["sty"] = "tex",
            ["textile"] = "textile",
            ["Tiltfile"] = "tiltfile",
            ["toml"] = "toml",
            ["ttcn"] = "ttcn3",
            ["tuc"] = "tuc",
            ["twig"] = "twig",
            ["ts"] = "typescript",
            ["tsx"] = "typescriptreact",
            ["typoscript"] = "typo3",
            ["vb"] = "vb",
            ["cls"] = "vba",
            ["wsf"] = "vbscript",
            ["vm"] = "velocity",
            ["v"] = "verilog",
            ["vhdl"] = "vhdl",
            ["vim"] = "viml",
            ["v"] = "vlang",
            ["volt"] = "volt",
            ["vue"] = "vue",
            ["wasm"] = "wasm",
            ["wy"] = "wenyan",
            ["wl"] = "wolfram",
            ["wurst"] = "wurst",
            ["wxml"] = "wxml",
            ["xml"] = "xml",
            ["xquery"] = "xquery",
            ["xsl"] = "xsl",
            ["bison"] = "yacc",
            ["yaml"] = "yaml",
            ["yang"] = "yang",
            ["zig"] = "zig"
        };

        public static string? GetLanguage(this FileData fileData)
        {
            var fullFilename = fileData.Filename.ToLower();
            var extension = Path.GetExtension(fullFilename);
            if (extension.Length == 0)
            {
                return null;
            }
            extension = extension[1..];

            if (!_extenstionToLangMap.TryGetValue(extension, out var lang))
            {
                if (!_extenstionToLangMap.TryGetValue(fullFilename, out lang))
                {
                    return null;
                }
            }

            return lang;
        }
    }
}


