@inject BlazeBinStateContainer state
@implements IDisposable

<div class="paste-list">
    <div class="uploads paste-list-section">
        <div class="paste-list-header">
            <span>Your Recent Sets</span>
        </div>
        <ul class="upload-list">
            @foreach (var item in state.Uploads ?? new List<FileBundle>())
            {
                <li class="paste@(item.Id == state.ActiveUpload?.Id ? " selected" : "")" @onclick="@(e => SelectUpload(e, item.Id))" @onclick:stopPropagation @onclick:preventDefault title=@item.Id>
                    <span class="remove-paste-button" @onclick="@(e => RemoveUpload(e, @item.Id))" @onclick:stopPropagation @onclick:preventDefault>X</span>
                    <input type="radio" name="paste-list-item" id="paste-list-item-@item.Id" value="@item.Id" checked="@(state.ActiveUpload == item)" />
                    <label for="paste-list-item-@item.Id">@item.Id</label>

                    @if (item.LastServerId == null)
                    {
                        <span class="dirty-indicator" title="@item.Id has not been uploaded"></span>
                    }
                </li>
            }
            @if((state.Uploads ?? new List<FileBundle>()).Count == 0)
            {
                <li class="paste selected">
                    <input type="radio" name="paste-list-item" id="paste-list-item-none" value="none" checked />
                    <label for="paste-list-item-none">No Sets Available</label>
                </li>
            }
        </ul>
    </div>
    <div class="history paste-list-section">
        <div class="paste-list-header">
            <span>Recently Viewed</span>
        </div>
        <ul>
            @foreach (var item in state.History ?? new List<string>())
            {
                <li class="paste@(item == state.ActiveUpload?.LastServerId ? " selected" : "")" @onclick="@(e => SelectNonFileBundle(e, item))" @onclick:stopPropagation @onclick:preventDefault>
                    <input type="radio" name="paste-list-item" id="history-list-item-@item" value="@item" />
                    <label for="history-list-item-@item">@item</label>
                    <div class="remove-paste-button" @onclick="@(e => RemoveHistory(e, @item))" @onclick:stopPropagation @onclick:preventDefault>X</div>
                </li>
            }
        </ul>
    </div>
    <div class="favorites paste-list-section">

        <div class="paste-list-header">
            <span>Favorites</span>
        </div>
        <ul>
            @foreach (var item in state.Favorites ?? new List<string>())
            {
                <li class="paste@(item == state.ActiveUpload?.LastServerId ? " selected" : "")" @onclick="@(e => SelectNonFileBundle(e, item))" @onclick:stopPropagation @onclick:preventDefault>
                    <input type="radio" name="paste-list-item" id="favorite-list-item-@item" value="@item" />
                    <label for="favorite-list-item-@item">@item</label>
                    <div class="remove-paste-button" @onclick="@(e => RemoveFavorite(e, @item))" @onclick:stopPropagation @onclick:preventDefault>X</div>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        state.OnChange += HandleStateChange;
    }

    private Task HandleStateChange()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task SelectUpload(MouseEventArgs e, string id)
    {
        if (e.Detail > 1)
        {
            return;
        }
        _ = state.Uploads ?? throw new ArgumentException(nameof(state.Uploads));
        var index = state.Uploads.FindIndex(a => a.Id == id);
        await state.Dispatch(() => state.SelectUpload(index));
    }

    private async Task RemoveUpload(MouseEventArgs e, string id)
    {
        if (e.Detail > 1)
        {
            return;
        }

        // prompt that upload is not posted, confirm
        await state.Dispatch(() => state.DeleteUpload(id));
    }

    private async Task RemoveFavorite(MouseEventArgs e, string favorite)
    {
        if (e.Detail > 1)
        {
            return;
        }

        await state.Dispatch(() => state.DeleteFavorite(favorite));
    }

    private async Task RemoveHistory(MouseEventArgs e, string history)
    {

        if (e.Detail > 1)
        {
            return;
        }

        await state.Dispatch(() => state.DeleteHistory(history));
    }

    private async Task SelectNonFileBundle(MouseEventArgs e, string serverId)
    {

        if (e.Detail > 1)
        {
            return;
        }

        await state.Dispatch(() => state.ReadUpload(serverId));
    }

    public void Dispose()
    {
        state.OnChange -= HandleStateChange;
        GC.SuppressFinalize(this);
    }
}