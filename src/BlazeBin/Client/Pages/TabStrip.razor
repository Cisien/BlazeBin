@inject BlazeBinStateContainer state
@implements IDisposable

<div class="tabstrip">

    @foreach (var item in state.ActiveUpload?.Files ?? new List<FileData>())
    {
        var iconImage = "default_file.svg";
        var detectedType = item.GetLanguage();
        if (detectedType != null)
        {
            iconImage = $"file_type_{detectedType}.svg";
        }

        <div class="tab@(item.Id == state.ActiveFile?.Id ? " selected": "")" @onclick="@(e => TabClicked(e, @item))" @onclick:preventDefault title="@item.Filename">
            <span class="close-tab-button" @onclick="@(e => CloseTab(e, item))" @onclick:preventDefault title="Remove File">X</span>
            <input type="radio" name="filetab" checked="@(item == state.ActiveFile)" id="@item.Id" />
            <label for="@item.Id">
                <span class="helper"></span><img src="icons/@iconImage" alt="@item.Filename" width="16" height="16" /> <span class="tab-name">@item.Filename</span>
            </label>
        </div>
    }

    @if (_newFilename != null)
    {
        <div class="tab">
            <span class="close-tab-button" @onclick="@(e => { _newFilename = null; })" @onclick:preventDefault title="Cancel">X</span>
            <input autofocus type="text" @bind="_newFilename" @bind:event="oninput" @onkeypress="CreateNewFile"
               id="new-file" placeholder="newfile.cs" />
        </div>
    }

    @if (state.ActiveUpload != null && state.ActiveUpload.Files.Count < 6)
    {
        <div class="new-tab" @onclick="@CreateTab" @onclick:preventDefault title="Add File">+</div>
    }
</div>

@code {
    private string? _newFilename;

    protected override void OnInitialized()
    {
        state.OnChange += HandleStateChange;
    }

    private Task HandleStateChange()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task TabClicked(MouseEventArgs e, FileData data)
    {
        if (e.Detail > 1)
        {
            return;
        }
        _ = state.ActiveUpload ?? throw new ArgumentException("Attempt to change set active file on an upload that doesn't exist");

        var index = state.ActiveUpload.Files.FindIndex(a => a.Id == data.Id);
        await state.Dispatch(() =>  state.SetActiveFile(index));
    }

    private async Task CloseTab(MouseEventArgs e, FileData data)
    {
        if(e.Detail > 1) {
            return;
        }

        await state.Dispatch(() =>  state.DeleteFile(data.Id));
    }

    private void CreateTab(MouseEventArgs e)
    {
        if (e.Detail > 1)
        {
            return;
        }

        _newFilename = "";
    }

    private async Task CreateNewFile(KeyboardEventArgs e)
    {
        if (e.Code != "Enter" && e.Code != "NumpadEnter")
        {
            return;
        }

        if (_newFilename == null)
        {
            return;
        }

        await state.Dispatch(() => state.CreateFile(_newFilename, true));
        _newFilename = null;
    }

    
    public void Dispose()
    {
        state.OnChange -= HandleStateChange;
        GC.SuppressFinalize(this);
    }
}
