@inject BlazeBinStateContainer state
@inject ComponentApplicationState appState
@inject ILogger<App> logger
@implements IDisposable

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        appState.OnPersisting += PersistingServerState;
        await state.Dispatch(() => state.InitializeUploadLists());

        if (appState.TryTakeAsJson<Error>("server-side-error", out var serverError) && serverError != null)
        {
            await state.Dispatch(() => state.ShowError(serverError.Title, serverError.Text));
        }

        if (appState.TryTakeAsJson<string>("af-token", out var afToken))
        {
            await state.Dispatch(() => state.StoreAntiforgeryToken(afToken));
        }
        else
        {
            logger.LogWarning("antiforgery token was not present");
        }

        await base.SetParametersAsync(parameters);
    }

    public Task PersistingServerState()
    {
        appState.PersistAsJson("server-side-error", state.Error);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        appState.OnPersisting -= PersistingServerState;
        GC.SuppressFinalize(this);
    }
}
